// This file is intentionally without code.
// It's present so that service worker registration will work when serving from the 'app' directory.
// The version of service-worker.js that's present in the 'dist' directory is automatically
// generated by the 'generate-service-worker' gulp task, and contains code to precache resources.


var CACHE_NAME = 'deep-machines-v1';

var urlToCache = [
  '/',
  '/css/bootstrap.css',
  '/css/font-awesome.min.css',
  '/css/owl.carousel.css',
  '/css/owl.theme.css',
  '/css/responsive.css',
  '/css/style.css',
  '/js/bootstrap.js',
  '/js/jquery.1.11.1.js',
  '/js/jquery.isotope.js',
  '/js/main.js',
  '/js/modernizr.custom.js',
  '/js/owl.carousel.js',
  '/js/SmoothScroll.js',
];

self.addEventListener('install', function(event){
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(function(cache){
        return cache.addAll(urlToCache);
      })
  );

  console.log("service worker installing...");

});

self.addEventListener('activate', function(event){
  console.log("Service worker activating");
});



self.addEventListener('fetch', function(event) {
  event.respondWith(
    caches.match(event.request)
      .then(function(response) {
        // Cache hit - return response
        if (response) {
          return response;
        }

        // IMPORTANT: Clone the request. A request is a stream and
        // can only be consumed once. Since we are consuming this
        // once by cache and once by the browser for fetch, we need
        // to clone the response
        var fetchRequest = event.request.clone();

        return fetch(fetchRequest).then(
          function(response) {
            // Check if we received a valid response
            if(!response || response.status !== 200 || response.type !== 'basic') {
              return response;
            }

            // IMPORTANT: Clone the response. A response is a stream
            // and because we want the browser to consume the response
            // as well as the cache consuming the response, we need
            // to clone it so we have 2 stream.
            var responseToCache = response.clone();

            caches.open(CACHE_NAME)
              .then(function(cache) {
                cache.put(event.request, responseToCache);
              });

            return response;
          }
        );
      })
    );
});
